import * as React from "react";
import { Scroll, PropertyControls, ControlType } from "framer";

export const TwitterStickyContext = React.createContext({} as any);
export const TwitterStickyConsumer = TwitterStickyContext.Consumer;

class TwitterStickyProvider extends React.Component {
  state = {
    top: 0,
    minTop: 0,
    duration: 200,
  };

  render() {
    const { top, minTop, duration } = this.state;
    return (
      <TwitterStickyContext.Provider value={{
        top,
        minTop,
        duration,
        updateTop: (top: number) => this.setState({ top }),
        updateProps: ({ minTop, duration }) => this.setState({ minTop, duration }),
      }}>
        {this.props.children}
      </ TwitterStickyContext.Provider>
    )
  }
};

type Props = { minTop: number; duration: number; width: number; height: number };

export class TwitterStickyContent extends React.Component<Props> {
  state = {
    childHeight: 0
  };

  render() {
    return (
      <TwitterStickyProvider>
        <ScrollableContent {...this.props} children={this.props.children} />
      </TwitterStickyProvider>
    );
  }

  static defaultProps = {
    minTop: 0,
    duration: 200,
  }

  static propertyControls: PropertyControls = {
    minTop: {
      type: ControlType.Number,
      title: "Offset",
      min: 0
    },
    duration: {
      type: ControlType.Number,
      title: 'Duration(ms)',
      min: 0
    }
  }
}

class ScrollableContent extends React.Component<Props> {
  private _set = false;
  render() {
    const { width, height } = this.props;
    return (
      <TwitterStickyConsumer>
        {({ updateProps, updateTop }) => {
          if (!this._set) {
            this._set = true;
            updateProps(this.props);
          }
          return (
            <Scroll
              width={width}
              height={height}
              overflow="hidden"
              direction="vertical"
              onMove={({ y }) => updateTop(y)}
            >
              {this.props.children}
            </Scroll>
          );
        }}
      </TwitterStickyConsumer>
    );
  }
}
